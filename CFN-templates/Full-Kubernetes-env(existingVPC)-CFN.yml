AWSTemplateFormatVersion: '2010-09-09'

Description: Creation automatisee d'un autoscaling group et de son load-balancer pour repartir la charge sur des Worker Nodes Kubernetes (non deployes via ce template). Creation d'une wild-card DNS pour deleguer les sous-domaines a l'Ingress Kubernetes.
# Creation automatisee d'un Groupe Autoscaling pointant sur une Launch Configuration
#   - L'autoscaling Group est configure pour ne demarrer qu'une seule instance de Worker Node Kubernetes - Aucune Scaling Policy n'est associee
# Création d'un target Group référancant l'autoscaling Group pour la réaprtition de charge
#   - 
# Creation du load-balancer avec un Listen configuration et pontant sur le target Group pour la repartition de la charge
#   - Ecoute sur le port 80
#   - Plage de ports ouverts sur le Security-Group du Load-Balancer en entrée : 80, 443, 8000-10000, IMCP
# Creation d'une wild-card DNS pour deleguer les sous-domaines a l'Ingress Kubernetes.


Parameters:

# VM Kubernetes master :
   DomaineDNS:
     Description: HostedZone de Route53 dans laquelle déclarer l'enregistrement DNS du kube-master
     Default: "maddoudou.click."
     Type: String
   SousDomaineKubernetes:
     Description: Le sous-domaine dedie a Kubernetes declare dans Route53 (ne pas oublier le "." a la fin)
     Default: "*.kubernetes.maddoudou.click."
     Type: String
   FQDNKubeMasterInstance:
     Description: Le FQDN de l'instance kube-master declare dans Route53 (ne pas oublier le "." a la fin)
     Default: "kubemaster.maddoudou.click."
     Type: String
   NomInstanceKubeMasterEC2:
     Description: Nom de l'instance hebergeant le master Kubernetes.
     Default: "kube-master-CFN"
     Type: String
   ImageKubeMaster:
     Description: Image de l'instance hebergeant le master Kubernetes.
     Type: AWS::EC2::Image::Id
     Default: ami-065c2d81a3a63e9d9
   TypeInstance:
     Description: Le type d'instance pour le master Kubernetes (t3.small recommandee).
     Type: String
     Default: t3.small
     AllowedValues: [ t2.micro, t3.small, t3.medium ]
   Keypair:
     Description: Keypair utilisee pour l'instance hebergeant le master Kubernetes.
     Type: AWS::EC2::KeyPair::KeyName
     Default: aws.ireland.keypair
     
# Autoscaling Group et Laod-balancer pour les worker nodes
   NomLaunchConfiguration:
     Description: Le nom de la "Launch Configuration" utilisee pour instancier les EC2 des Worker Nodes Kubernetes
     Default: "KubeWorker-nodes"
     Type: String
   NomAutoScalingGroup:
     Description: Le nom du groupe auto-scaling hebergeant les Worker Nodes Kubernetes
     Default: "KubeWorker-AutoScalingGroup-CFN"
     Type: String
   NomLoadBalancer:
     Description: Le nom du load-balancer repartissant la charge pour leGroup Autoscaling des Worker Nodes Kubernetes
     Default: "KubeWorker-LB-CFN"
     Type: String
   NomTargetGroup:
     Description: Le nom du load-balancer repartissant la charge pour leGroup Autoscaling des Worker Nodes Kubernetes
     Default: "KubeWorker-TargetGroup-CFN"
     Type: String
   VPCKubernetes:
     Description: Le VPC hebergeant le load-balancer et les instances Kubernetes. Doit être 172.32.x.x car l'image du master a ete creee dans ce subnet (doit etre accessible via Internet)
     Type: AWS::EC2::VPC::Id
   SubnetPublicKubeNodes:
     Description: Subnet du VPC hebergeant le master et les worker nodes Kubernetes. Doit être 172.32.1.0/24 car l'image du master a ete creee dans ce subnet (accessible via Internet).
     Type: AWS::EC2::Subnet::Id
   SubnetsPublicLB:
     Description: 2 Subnets du VPC hebergeant le load-balancer (car il necessite 2 subnets dans des AZ separees).
     Type: List<AWS::EC2::Subnet::Id>
     
     
Resources:

#-----------------------------------------------------------------------------------------------
# Kube-master node -----------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

  KubemasterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCKubernetes'
      GroupDescription: Security Group AutoScalingGroup !Sub ${NomAutoScalingGroup}
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '32000'
        ToPort: '32767'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '32000'
        ToPort: '32767'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '8285'
        ToPort: '8285'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '8472'
        ToPort: '8472'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '2379'
        ToPort: '2380'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '6443'
        ToPort: '6443'
        CidrIp: 0.0.0.0/0
# Pour tests : A SUPPRIMER :
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
# Pour tests : A SUPPRIMER :
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
# Pas besoin si VXLAN :
#      - IpProtocol: tcp
#        FromPort: '0'
#        ToPort: '65535'
#        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${NomInstanceKubeMasterEC2}-SG-CFN
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
        
  kubemasterInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageKubeMaster
      InstanceType: !Ref TypeInstance
      KeyName:
        Ref: Keypair
      NetworkInterfaces:
        - AssociatePublicIpAddress: 'true'
          DeviceIndex: '0'
          SubnetId: !Ref 'SubnetPublicKubeNodes'
          GroupSet:
            - !Ref 'KubemasterSecurityGroup'
          PrivateIpAddresses:
          - PrivateIpAddress: '172.32.1.10' # L'image du master Kubernetes a été créée avec cette adresse, elle ne doit pas changer.
            Primary: 'true'
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash
          sudo swapoff -a
          sudo sysctl net.bridge.bridge-nf-call-iptables=1
      Tags:
      - Key: Name
        Value: !Sub ${NomInstanceKubeMasterEC2}
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
#      UserData:
#        "Fn::Base64": !Sub |
#          #!/bin/bash -x
#          sudo XXXXXX
 
  KubemasterDnsRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref 'DomaineDNS'
      Comment: Enregistrement DNS pour !Sub ${NomInstanceKubeMasterEC2}
      Name: !Ref 'FQDNKubeMasterInstance'
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt kubemasterInstance.PublicIp
     
#-----------------------------------------------------------------------------------------------
# Load-balancer --------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

# Utilise seulement dans la configLaunch qui n'est d'ailleurs pas creee dans ce template :     
  KubeWorkerNodesSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCKubernetes'
      GroupDescription: Security Group AutoScalingGroup !Sub ${NomAutoScalingGroup}
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '22'
        ToPort: '22'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '32000'
        ToPort: '32767'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '32000'
        ToPort: '32767'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '10250'
        ToPort: '10250'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '8285'
        ToPort: '8285'
        CidrIp: 0.0.0.0/0
      - IpProtocol: udp
        FromPort: '8472'
        ToPort: '8472'
        CidrIp: 0.0.0.0/0
# Pour tests : A SUPPRIMER :
      - IpProtocol: tcp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
# Pour tests : A SUPPRIMER :
      - IpProtocol: udp
        FromPort: '0'
        ToPort: '65535'
        CidrIp: 0.0.0.0/0
# Pas besoin si VXLAN :
#      - IpProtocol: tcp
#        FromPort: '0'
#        ToPort: '65535'
#        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${NomLoadBalancer}-SG-CFN
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref 'VPCKubernetes'
      GroupDescription: Security Group LoadBalancer !Sub ${NomLoadBalancer}
      SecurityGroupIngress:
      - IpProtocol: icmp
        FromPort: '8'
        ToPort: "-1"
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '8000'
        ToPort: '10000'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      Tags:
      - Key: Name
        Value: !Sub ${NomLoadBalancer}-SG-CFN
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
        
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: application
      Name: !Ref 'NomLoadBalancer'
#      Scheme: internet-facing
      SecurityGroups:
      - Ref: LBSecurityGroup
#      AvailabilityZones: !GetAZs ''
#      CrossZone: 'true'
      Subnets: !Ref SubnetsPublicLB
#      HealthCheck:
#        Target: HTTP:80/
#        HealthyThreshold: '3'
#        UnhealthyThreshold: '5'
#        Interval: '30'
#        Timeout: '5'
      Tags:
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
        
  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref 'LoadBalancerListenerTargetGroup'
      LoadBalancerArn: !Ref 'LoadBalancer'
      Port: 80
      Protocol: HTTP
    
  LoadBalancerListenerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LoadBalancer
    Properties:
      Name: !Ref 'NomTargetGroup'
      Port: 30000
      Protocol: HTTP
      VpcId: !Ref 'VPCKubernetes'
      Tags:
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
    
#-----------------------------------------------------------------------------------------------
# Autoscaling ----------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

  KubeNodesAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    DependsOn:
    - LoadBalancer
    Properties:
      AutoScalingGroupName: !Ref 'NomAutoScalingGroup'
#      AvailabilityZones:
#        Fn::GetAZs: ''
      LaunchConfigurationName: !Ref 'NomLaunchConfiguration'
      DesiredCapacity: '1'
      MinSize: '1'
      MaxSize: '1'
      TargetGroupARNs:
      - !Ref 'LoadBalancerListenerTargetGroup'
      HealthCheckType: ELB
      HealthCheckGracePeriod: 28000 # Volontairement élevé (8h) car par défaut le LB les déclare Unhealthy trop tot et l'autoscaling supprime les worker-nodes trop frequement.
      VPCZoneIdentifier:
      - !Ref 'SubnetPublicKubeNodes'
      Tags:
      - Key: CloudFormationStack
        Value: !Ref 'AWS::StackId'
        PropagateAtLaunch: 'true'
        
# A voir plus tard :        
#  KubeNodeLaunchConfiguration:
#    Type: AWS::AutoScaling::LaunchConfiguration
#    Properties:
#      ImageId: ami-039f68e9feddd864d
#      SecurityGroups:
#      - Ref: KubeWorkerNodesSecurityGroup
#      InstanceType: t2.micro
#      BlockDeviceMappings:
#      - DeviceName: "/dev/sdk"
#        Ebs:
#          VolumeSize: '8'
#      - DeviceName: "/dev/sdc"
#        VirtualName: ephemeral0


#-----------------------------------------------------------------------------------------------
# Sous-domaine DNS Kubernetes ------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------

  KubernetesSousDomaine:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Ref 'DomaineDNS'
      Comment: Enregistrement du sous-domaine Kubernetes
      RecordSets:
      - Name: !Ref 'SousDomaineKubernetes'
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
          DNSName: !GetAtt LoadBalancer.DNSName
      
      
#-----------------------------------------------------------------------------------------------
# Outputs ------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------
  
Outputs:
     IPpublicInstance:
       Description: IP public de l'instance creee
       Value: !Sub ${kubemasterInstance.PublicIp}
     FQDNKubeMasterInstance:  
       Description: l'enregistrement DNS de l'instance creee
       Value: !Ref 'FQDNKubeMasterInstance'
        